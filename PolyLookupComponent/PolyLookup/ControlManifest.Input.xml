<?xml version="1.0" encoding="utf-8" ?>
<manifest>
  <control namespace="DCEPCF" constructor="PolyLookup" version="1.3.0" display-name-key="PolyLookup v1.3.0" description-key="Multi-select lookup supporting different type of many-to-many relationships" control-type="virtual" >
    <!--external-service-usage node declares whether this 3rd party PCF control is using external service or not, if yes, this control will be considered as premium and please also add the external domain it is using.
    If it is not using any external service, please set the enabled="false" and DO NOT add any domain below. The "enabled" will be false by default.
    Example1:
      <external-service-usage enabled="true">
        <domain>www.Microsoft.com</domain>
      </external-service-usage>
    Example2:
      <external-service-usage enabled="false">
      </external-service-usage>
    -->
    <external-service-usage enabled="false">
      <!--UNCOMMENT TO ADD EXTERNAL DOMAINS
      <domain></domain>
      <domain></domain>
      -->
    </external-service-usage>
    <!-- property node identifies a specific, configurable piece of data that the control expects from CDS -->
    <property name="boundField" display-name-key="Bound Field" description-key="The field that the component is bound to" of-type-group="text" usage="bound" required="true" />
    <property name="relationshipType" display-name-key="Relationship Type" description-key="Relationship type between tables: Many To Many, Custom N:N, Connection" of-type="Enum" usage="input" required="true" >
      <value name="nton" display-name-key="Many To Many">0</value>
      <value name="custom" display-name-key="Custom N:1-1:N">1</value>
      <value name="connection" display-name-key="Connection">2</value>
    </property>
    <property name="relationship" display-name-key="Relationship Name" description-key="- N-N: The relationship name to the associated table&#xA;- Custom N-N: The relationship name from the current table to the intermediate table&#xA;- Connection: Connected From relationship name" of-type="SingleLine.Text" usage="input" required="true" />
    <property name="relationship2" display-name-key="Relationship 2 Name" description-key="- N-N: Not applicable&#xA;- Custom N-N: The relationship name from the intermediate table to the associated table&#xA;- Connection: Connected To relationship name" of-type="SingleLine.Text" usage="input" required="false" />    
    <property name="outputSelected" display-name-key="Should Output Selected Text" description-key="Whether output selected records as text to the Bound Field" of-type="Enum" usage="input" required="true" default-value="0" >
      <value name="false" display-name-key="No">0</value>
      <value name="true" display-name-key="Yes">1</value>
    </property>
    <property name="outputField" display-name-key="Output Selected Field" description-key="The field to output the selected records as a JSON array. Can be the same as bound field" of-type-group="text" usage="bound" required="false" />
    <property name="lookupView" display-name-key="Lookup View" description-key="The view name for the suggestion list when searching. Use system Lookup View when empty or not found" of-type="SingleLine.Text" usage="input" required="false" />        
    <property name="itemLimit" display-name-key="Item Limit" description-key="Maximum number of selected items" of-type="Whole.None" usage="input" required="false" />
    <property name="allowQuickCreate" display-name-key="Allow Quick Create" description-key="Enable/disable the create button to quickly create a new option" of-type="Enum" usage="input" required="false" default-value="0" >
      <value name="false" display-name-key="No">0</value>
      <value name="true" display-name-key="Yes">1</value>
    </property>
    <property name="languagePackPath" display-name-key="Language Pack Path" description-key="Path to a resx web resource, relative to the environment url (eg. /webresources/new_/resx/PolyLookup.1033.resx), to be used as Language Pack. Default to English if not provided." of-type="SingleLine.Text" usage="input" required="false" />
    <type-group name="text">
      <type>SingleLine.Text</type>
      <type>SingleLine.TextArea</type>
      <type>Multiple</type>
    </type-group>
    <!--
      Property node's of-type attribute can be of-type-group attribute.
      Example:
      <type-group name="numbers">
        <type>Whole.None</type>
        <type>Currency</type>
        <type>FP</type>
        <type>Decimal</type>
      </type-group>
      <property name="sampleProperty" display-name-key="Property_Display_Key" description-key="Property_Desc_Key" of-type-group="numbers" usage="bound" required="true" />
    -->
    <resources>
      <code path="index.ts" order="1"/>
      <platform-library name="React" version="16.8.6" />
      <platform-library name="Fluent" version="8.29.0" />
      <!-- UNCOMMENT TO ADD MORE RESOURCES
      <css path="css/PolyLookup.css" order="1" />
      -->
      <resx path="strings/PolyLookup.1033.resx" version="1.0.0" />
    </resources>
    <!-- UNCOMMENT TO ENABLE THE SPECIFIED API
    <feature-usage>
      <uses-feature name="Device.captureAudio" required="true" />
      <uses-feature name="Device.captureImage" required="true" />
      <uses-feature name="Device.captureVideo" required="true" />
      <uses-feature name="Device.getBarcodeValue" required="true" />
      <uses-feature name="Device.getCurrentPosition" required="true" />
      <uses-feature name="Device.pickFile" required="true" />
      <uses-feature name="Utility" required="true" />
      <uses-feature name="WebAPI" required="true" />
    </feature-usage>
    -->
  </control>
</manifest>
